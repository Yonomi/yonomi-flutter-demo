"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type BatteryLevelDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The BatteryLevel state of this device."""
  state: BatteryLevelState!
}

"""The state information for the BatteryLevel trait"""
type BatteryLevelState {
  """Current battery level of the device."""
  batteryLevel: BatteryLevelStateBatteryLevelField!
}

"""Information about the BatteryLevel state for the batteryLevel field"""
type BatteryLevelStateBatteryLevelField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: BatteryLevelStateReportedBatteryLevel

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: BatteryLevelStateDesiredBatteryLevel
}

"""
Information about the desired BatteryLevel state for the batteryLevel field.
"""
type BatteryLevelStateDesiredBatteryLevel implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Current battery level of the device."""
  value: Int!

  """Current battery level of the device."""
  delta: Int
}

"""
Information about the reported BatteryLevel state for the batteryLevel field.
"""
type BatteryLevelStateReportedBatteryLevel implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Current battery level of the device."""
  value: Int!
}

type BrightnessDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The Brightness configuration for this device."""
  properties: BrightnessProperties!

  """The Brightness state of this device."""
  state: BrightnessState!
}

"""The properties (trait configuration) payload for the Brightness trait"""
type BrightnessProperties {
  """
  Indicates if this device supports relative brightness changes.
  
  """
  supportsRelativeBrightness: Boolean!
}

"""The state information for the Brightness trait"""
type BrightnessState {
  """Current absolute brightness level of this device."""
  brightness: BrightnessStateBrightnessField!
}

"""Information about the Brightness state for the brightness field"""
type BrightnessStateBrightnessField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: BrightnessStateReportedBrightness

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: BrightnessStateDesiredBrightness
}

"""
Information about the desired Brightness state for the brightness field.
"""
type BrightnessStateDesiredBrightness implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Current absolute brightness level of this device."""
  value: Int!

  """Current absolute brightness level of this device."""
  delta: Int
}

"""
Information about the reported Brightness state for the brightness field.
"""
type BrightnessStateReportedBrightness implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Current absolute brightness level of this device."""
  value: Int!
}

type ButtonDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The Button configuration for this device."""
  properties: ButtonProperties!
}

"""The properties (trait configuration) payload for the Button trait"""
type ButtonProperties {
  """Valid button names for this device."""
  availableButtonNames: [String!]!
}

"""Represents a channel."""
type Channel {
  """Channel number."""
  channelNumber: Int!
}

"""Mutation input: Represents a channel."""
input ChannelInput {
  """Channel number."""
  channelNumber: Int!
}

type ChannelSettingDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The ChannelSetting state of this device."""
  state: ChannelSettingState!
}

"""The state information for the ChannelSetting trait"""
type ChannelSettingState {
  """The device's current channel."""
  currentChannel: ChannelSettingStateCurrentChannelField!
}

"""
Information about the ChannelSetting state for the currentChannel field
"""
type ChannelSettingStateCurrentChannelField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ChannelSettingStateReportedCurrentChannel

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ChannelSettingStateDesiredCurrentChannel
}

"""
Information about the desired ChannelSetting state for the currentChannel field.
"""
type ChannelSettingStateDesiredCurrentChannel implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """The device's current channel."""
  value: Channel!

  """The device's current channel."""
  delta: Channel
}

"""
Information about the reported ChannelSetting state for the currentChannel field.
"""
type ChannelSettingStateReportedCurrentChannel implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """The device's current channel."""
  value: Channel!
}

"""Represents a color in one of several different formats."""
union ColorValue = RGBColorValue | TemperatureColorValue

type CreateActionResponse {
  """The device that was targeted by this action"""
  device: Device!

  """The transaction ID for this action"""
  transactionId: ID!

  """The ID for this action"""
  actionId: ID!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The base trait desired state field interface."""
interface DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!
}

type Device {
  id: ID!

  """When this device was created."""
  createdAt: DateTime!

  """When this device was last updated."""
  updatedAt: DateTime!

  """All of the instances of the traits that this device implements."""
  traits: [DeviceTrait!]!
}

"""A connection to a collection of Device edges."""
type DeviceConnection {
  pageInfo: PageInfo!
  edges: [DeviceEdge!]!
}

"""A single edge from a connection to Device nodes."""
type DeviceEdge {
  cursor: String!
  node: Device!
}

"""
A filter that can be used to narrow device queries based on various criteria.
"""
input DeviceFilterInput {
  """
  If provided, this query will only return devices that have at least one trait in the list.
  """
  traits: [TraitName!]!
}

"""The base DeviceTrait interface."""
interface DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!
}

"""The various possible fan modes for a device."""
enum FanMode {
  """The fan is always on."""
  ON

  """The fan runs when needed."""
  AUTO

  """The fan runs in order circulate air."""
  CIRCULATE

  """The fan is in `sway` mode."""
  SWAY

  """The fan is in `wind` mode."""
  WIND

  """The fan is in `health` mode."""
  HEALTH

  """The fan is in `humidity` mode."""
  HUMIDITY

  """The fan is in `eco` mode."""
  ECO

  """The fan is in `energy` mode."""
  ENERGY

  """The fan is in `fresh` mode."""
  FRESH

  """The fan is in `taste` mode."""
  TASTE
}

type FanSettingDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The FanSetting configuration for this device."""
  properties: FanSettingProperties!

  """The FanSetting state of this device."""
  state: FanSettingState!
}

"""The properties (trait configuration) payload for the FanSetting trait"""
type FanSettingProperties {
  """Supported fan modes by this device."""
  availableModes: [FanMode!]!

  """
  Indicates that this device supports fan blades that rotate in a reversed direction.
  
  """
  supportsReversible: Boolean!

  """
  Indicates that this device supports relative changes in fan speed.
  
  """
  supportsRelativeFanSpeed: Boolean!

  """
  Indicates that this device supports rotation.
  
  """
  supportsRotation: Boolean!

  """
  The allowed rotation range supported by this device.
  
  """
  supportedRotationRange: IntRange
}

"""The state information for the FanSetting trait"""
type FanSettingState {
  """The current fan mode of this device."""
  currentMode: FanSettingStateCurrentModeField!

  """The current fan speed of this device as a percentage."""
  fanSpeed: FanSettingStateFanSpeedField!

  """The current fan rotation of this device in degrees."""
  currentRotation: FanSettingStateCurrentRotationField!
}

"""Information about the FanSetting state for the currentMode field"""
type FanSettingStateCurrentModeField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: FanSettingStateReportedCurrentMode

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: FanSettingStateDesiredCurrentMode
}

"""Information about the FanSetting state for the currentRotation field"""
type FanSettingStateCurrentRotationField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: FanSettingStateReportedCurrentRotation

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: FanSettingStateDesiredCurrentRotation
}

"""
Information about the desired FanSetting state for the currentMode field.
"""
type FanSettingStateDesiredCurrentMode implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """The current fan mode of this device."""
  value: FanMode!

  """The current fan mode of this device."""
  delta: FanMode
}

"""
Information about the desired FanSetting state for the currentRotation field.
"""
type FanSettingStateDesiredCurrentRotation implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """The current fan rotation of this device in degrees."""
  value: Int!

  """The current fan rotation of this device in degrees."""
  delta: Int
}

"""Information about the desired FanSetting state for the fanSpeed field."""
type FanSettingStateDesiredFanSpeed implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """The current fan speed of this device as a percentage."""
  value: Int!

  """The current fan speed of this device as a percentage."""
  delta: Int
}

"""Information about the FanSetting state for the fanSpeed field"""
type FanSettingStateFanSpeedField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: FanSettingStateReportedFanSpeed

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: FanSettingStateDesiredFanSpeed
}

"""
Information about the reported FanSetting state for the currentMode field.
"""
type FanSettingStateReportedCurrentMode implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """The current fan mode of this device."""
  value: FanMode!
}

"""
Information about the reported FanSetting state for the currentRotation field.
"""
type FanSettingStateReportedCurrentRotation implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """The current fan rotation of this device in degrees."""
  value: Int!
}

"""
Information about the reported FanSetting state for the fanSpeed field.
"""
type FanSettingStateReportedFanSpeed implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """The current fan speed of this device as a percentage."""
  value: Int!
}

"""Represents an inclusive range between two floats."""
type FloatRange {
  min: Float!
  max: Float!
}

type GeneratedAccountLinkingUrl {
  url: String!
  integration: Integration!
}

type Health {
  ok: Boolean!
}

type Integration {
  id: String!
  displayName: String!
}

"""A connection to a collection of Integration edges."""
type IntegrationConnection {
  pageInfo: PageInfo!
  edges: [IntegrationEdge!]!
}

"""A single edge from a connection to Integration nodes."""
type IntegrationEdge {
  cursor: String!
  node: Integration!
}

"""Represents an inclusive range between two integers."""
type IntRange {
  min: Int!
  max: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LockUnlockDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The LockUnlock configuration for this device."""
  properties: LockUnlockProperties!

  """The LockUnlock state of this device."""
  state: LockUnlockState!
}

"""The properties (trait configuration) payload for the LockUnlock trait"""
type LockUnlockProperties {
  """
  Indicates if the lock supports reporting its state as jammed implying that its lock status cannot be determined.
  
  """
  supportsIsJammed: Boolean!
}

"""The state information for the LockUnlock trait"""
type LockUnlockState {
  """Indicates whether the device is currently locked."""
  isLocked: LockUnlockStateIsLockedField!

  """
  Indicates whether the device is currently jammed, hence the locked
  status couldn’t be determined.
  
  """
  isJammed: LockUnlockStateIsJammedField!
}

"""Information about the desired LockUnlock state for the isJammed field."""
type LockUnlockStateDesiredIsJammed implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """
  Indicates whether the device is currently jammed, hence the locked
  status couldn’t be determined.
  
  """
  value: Boolean!

  """
  Indicates whether the device is currently jammed, hence the locked
  status couldn’t be determined.
  
  """
  delta: Boolean
}

"""Information about the desired LockUnlock state for the isLocked field."""
type LockUnlockStateDesiredIsLocked implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Indicates whether the device is currently locked."""
  value: Boolean!

  """Indicates whether the device is currently locked."""
  delta: Boolean
}

"""Information about the LockUnlock state for the isJammed field"""
type LockUnlockStateIsJammedField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: LockUnlockStateReportedIsJammed

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: LockUnlockStateDesiredIsJammed
}

"""Information about the LockUnlock state for the isLocked field"""
type LockUnlockStateIsLockedField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: LockUnlockStateReportedIsLocked

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: LockUnlockStateDesiredIsLocked
}

"""
Information about the reported LockUnlock state for the isJammed field.
"""
type LockUnlockStateReportedIsJammed implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """
  Indicates whether the device is currently jammed, hence the locked
  status couldn’t be determined.
  
  """
  value: Boolean!
}

"""
Information about the reported LockUnlock state for the isLocked field.
"""
type LockUnlockStateReportedIsLocked implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Indicates whether the device is currently locked."""
  value: Boolean!
}

type Mutation {
  """Update the display name of the currently logged in user."""
  updateUserDisplayName(
    """The new display name. If not provided, display name will be cleared."""
    displayName: String
  ): User!

  """Generate an account linking URL for a specific integration."""
  generateAccountLinkingUrl(
    """The id of the integration"""
    integrationId: ID!
  ): GeneratedAccountLinkingUrl!

  """Set the absolute brightness of this device."""
  actionBrightnessSetBrightnessPercentage(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The new absolute brightness value."""
    brightness: Int!
  ): CreateActionResponse!

  """Set the relative brightness value of this device."""
  actionBrightnessSetRelativeBrightness(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The new relative brightness value."""
    brightness: Int!
  ): CreateActionResponse!

  """Send a unidirectional command via button press to this device."""
  actionButtonPress(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """Name of the button."""
    buttonName: String!
  ): CreateActionResponse!

  """Set the channel of this device."""
  actionChannelSettingSetChannel(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The new channel."""
    channel: ChannelInput!
  ): CreateActionResponse!

  """Set the fan mode for this device."""
  actionFanSettingSetFanMode(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The new fan mode."""
    fanMode: FanMode!
  ): CreateActionResponse!

  """Set the current fan speed."""
  actionFanSettingSetFanSpeed(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """This is the speed to set on the fan as a percentage."""
    speed: Int!
  ): CreateActionResponse!

  """Modify the fan speed by percentage relative to the current fan speed."""
  actionFanSettingSetFanSpeedRelative(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """This is the percentage to modify the current fan speed by."""
    speed: Int!
  ): CreateActionResponse!

  """Modify the fan rotation"""
  actionFanSettingSetFanRotation(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """This is the degree to which the fan should rotate."""
    rotation: Int!
  ): CreateActionResponse!

  """Lock (true) or unlock (false) the device."""
  actionLockUnlockLockUnlock(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """True to lock, false to unlock."""
    lock: Boolean!
  ): CreateActionResponse!

  """Open or close the device."""
  actionOpenCloseOpenClose(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """Absolute percentage of movement to close or open."""
    openClose: Int!

    """Direction as supported in the list of supported directions."""
    openDirection: OpenDirection!
  ): CreateActionResponse!

  """Open or close the device relative to current position."""
  actionOpenCloseOpenCloseRelative(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """Relative percentage of movement to close or open."""
    openClose: Int!

    """Direction as supported in the list of supported directions."""
    openDirection: OpenDirection!
  ): CreateActionResponse!

  """Set device to a playback state."""
  actionPlaybackSettingSetPlaybackState(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The playback state to set on the device."""
    playbackState: PlaybackState!
  ): CreateActionResponse!

  """
  Whether to turn the device on or off. Should update to reflect argument is only a boolean.
  """
  actionPowerOnOff(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """Whether to turn the device on (true) or off (false)."""
    on: Boolean!
  ): CreateActionResponse!

  """Toggle power on/off."""
  actionPowerToggle(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"
  ): CreateActionResponse!

  """Set the mode of the device."""
  actionThermostatSettingSetMode(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The mode to set the device to."""
    mode: ThermostatMode!
  ): CreateActionResponse!

  """Set the target temperature of the device for the associated mode."""
  actionThermostatSettingSetTargetTemperature(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The temperature to set the device to in Celsius."""
    targetTemperature: Float!
  ): CreateActionResponse!

  """Set the fan mode of the device."""
  actionThermostatSettingSetFanMode(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The fan mode to set the device to."""
    fanMode: FanMode!
  ): CreateActionResponse!

  """Set a temperature range for the device to sit between."""
  actionThermostatSettingSetTargetTemperatureRange(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The low temperature to set the device to in Celsius."""
    setPointLow: Float!

    """The high temperature to set the device to in Celsius."""
    setPointHigh: Float!
  ): CreateActionResponse!

  """Set the absolute volume value of this device."""
  actionVolumeSetVolume(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The new absolute volume level."""
    volume: Int!
  ): CreateActionResponse!

  """
  Set the volume level of this device relative to the current set volume level.
  """
  actionVolumeSetVolumeRelative(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"

    """The percentage value to change the volume level by."""
    volume: Int!
  ): CreateActionResponse!

  """Toggle mute on the device."""
  actionVolumeToggleMute(
    """The target device's id"""
    deviceId: ID!

    """
    The identifier for the specific trait instance this action is targeting.
    """
    traitInstance: String! = "default"
  ): CreateActionResponse!

  """(ADMIN API): Set the enabled integrations for current tenant"""
  ADMIN_setIntegrations(
    """The IDs of all the integrations to enable"""
    integrationIds: [ID!]!
  ): [Integration!]!

  """(PARTNER API): Create a new integration"""
  PARTNER_createIntegration(
    """The display name of the the integration"""
    displayName: String
  ): Integration!

  """(VIRTUAL CONNECTOR): simulate discovery for a virtual connector"""
  VIRTUAL_CONNECTOR_discover(
    """
    The (arbitrary) value to use as the Linked Account ID. This is only used for permissions.
    """
    linkedAccountId: ID!

    """Number of new locks to discover (LOCK trait)"""
    locks: Int! = 0

    """Number of new switches to discover (POWER trait)"""
    switches: Int! = 0

    """Number of lights to discovery (POWER and BRIGHTNESS traits)"""
    lights: Int! = 0
  ): [Device!]!

  """(VIRTUAL CONNECTOR): simulate reporting state for a device"""
  VIRTUAL_CONNECTOR_reportState(
    """
    The value to use as the Linked Account ID. This is only used for permissions.
    """
    linkedAccountId: ID!

    """The device ID that should be updated."""
    deviceId: ID!

    """The trait being updated."""
    traitName: TraitName!

    """The specific trait instance being updated."""
    traitInstance: String! = "default"

    """The state field being updated"""
    fieldName: String!

    """The date to report this state being sampeld at."""
    sampledAt: DateTime

    """The reported value"""
    value: JSON!
  ): Device!

  """(VIRTUAL CONNECTOR): update a simulated device's configuration"""
  VIRTUAL_CONNECTOR_configureDevice(
    """
    The value to use as the Linked Account ID. This is only used for permissions.
    """
    linkedAccountId: ID!

    """The device ID that should be updated."""
    deviceId: ID!

    """Traits to update the device with"""
    traits: JSON!
  ): Device!

  """(VIRTUAL CONNECTOR): simulate updating an actions status"""
  VIRTUAL_CONNECTOR_updateActionStatus(
    """
    The value to use as the Linked Account ID. This is only used for permissions.
    """
    linkedAccountId: ID!

    """The device ID that should be updated."""
    deviceId: ID!

    """The action ID that should be updated."""
    actionId: ID!

    """The status the action should be set to"""
    status: VIRTUAL_CONNECTOR_ActionStatus! = REJECTED
  ): Device!
}

type OpenCloseDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The OpenClose configuration for this device."""
  properties: OpenCloseProperties!

  """The OpenClose state of this device."""
  state: OpenCloseState!
}

"""The properties (trait configuration) payload for the OpenClose trait"""
type OpenCloseProperties {
  """Various open/close directions supported by the device."""
  supportedDirections: [OpenDirection!]

  """
  Indicates if the device supports opening and closing by relative amounts.
  
  """
  supportsOpenCloseRelative: Boolean!
}

"""The state information for the OpenClose trait"""
type OpenCloseState {
  """The open/close state of the device."""
  openState: OpenCloseStateOpenStateField!

  """The ammount that the device is open."""
  openPercent: OpenCloseStateOpenPercentField!

  """The direction that the device is open"""
  openDirection: OpenCloseStateOpenDirectionField!
}

"""
Information about the desired OpenClose state for the openDirection field.
"""
type OpenCloseStateDesiredOpenDirection implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """The direction that the device is open"""
  value: [OpenDirection!]

  """The direction that the device is open"""
  delta: [OpenDirection!]
}

"""
Information about the desired OpenClose state for the openPercent field.
"""
type OpenCloseStateDesiredOpenPercent implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """The ammount that the device is open."""
  value: Int!

  """The ammount that the device is open."""
  delta: Int
}

"""Information about the desired OpenClose state for the openState field."""
type OpenCloseStateDesiredOpenState implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """The open/close state of the device."""
  value: OpenState!

  """The open/close state of the device."""
  delta: OpenState
}

"""Information about the OpenClose state for the openDirection field"""
type OpenCloseStateOpenDirectionField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: OpenCloseStateReportedOpenDirection

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: OpenCloseStateDesiredOpenDirection
}

"""Information about the OpenClose state for the openPercent field"""
type OpenCloseStateOpenPercentField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: OpenCloseStateReportedOpenPercent

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: OpenCloseStateDesiredOpenPercent
}

"""Information about the OpenClose state for the openState field"""
type OpenCloseStateOpenStateField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: OpenCloseStateReportedOpenState

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: OpenCloseStateDesiredOpenState
}

"""
Information about the reported OpenClose state for the openDirection field.
"""
type OpenCloseStateReportedOpenDirection implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """The direction that the device is open"""
  value: [OpenDirection!]
}

"""
Information about the reported OpenClose state for the openPercent field.
"""
type OpenCloseStateReportedOpenPercent implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """The ammount that the device is open."""
  value: Int!
}

"""
Information about the reported OpenClose state for the openState field.
"""
type OpenCloseStateReportedOpenState implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """The open/close state of the device."""
  value: OpenState!
}

"""Various opening/closing directions."""
enum OpenDirection {
  """Open/close in the up direction."""
  UP

  """Open/close in the down direction."""
  DOWN

  """Open/close to the left."""
  LEFT

  """Open/close to the right."""
  RIGHT
}

"""The current state of something that can be opened and closed."""
type OpenState {
  """The percentage that the device is open."""
  openPercent: Int!

  """The direction that the device is open."""
  openDirection: OpenDirection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type PlaybackSettingDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The PlaybackSetting configuration for this device."""
  properties: PlaybackSettingProperties!

  """The PlaybackSetting state of this device."""
  state: PlaybackSettingState!
}

"""
The properties (trait configuration) payload for the PlaybackSetting trait
"""
type PlaybackSettingProperties {
  """List of playback controls"""
  availablePlaybackStates: [PlaybackState!]!
}

"""The state information for the PlaybackSetting trait"""
type PlaybackSettingState {
  """Current playback state."""
  currentPlaybackState: PlaybackSettingStateCurrentPlaybackStateField!
}

"""
Information about the PlaybackSetting state for the currentPlaybackState field
"""
type PlaybackSettingStateCurrentPlaybackStateField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: PlaybackSettingStateReportedCurrentPlaybackState

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: PlaybackSettingStateDesiredCurrentPlaybackState
}

"""
Information about the desired PlaybackSetting state for the currentPlaybackState field.
"""
type PlaybackSettingStateDesiredCurrentPlaybackState implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Current playback state."""
  value: PlaybackState!

  """Current playback state."""
  delta: PlaybackState
}

"""
Information about the reported PlaybackSetting state for the currentPlaybackState field.
"""
type PlaybackSettingStateReportedCurrentPlaybackState implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Current playback state."""
  value: PlaybackState!
}

"""Playback state that the device is in."""
enum PlaybackState {
  """Device is playing."""
  PLAYING

  """Playback is paused."""
  PAUSED

  """Playback is stopped."""
  STOPPED
}

type PowerDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The Power configuration for this device."""
  properties: PowerProperties!

  """The Power state of this device."""
  state: PowerState!
}

"""The properties (trait configuration) payload for the Power trait"""
type PowerProperties {
  """Indicates if the device could be toggled"""
  supportsToggle: Boolean!

  """
  Indicates if the device actually has distinct On and Off features as opposed to a single power button.
  """
  supportsDiscreteOnOff: Boolean!
}

"""The state information for the Power trait"""
type PowerState {
  """Whether a device’s power state is on or off."""
  power: PowerStatePowerField!
}

"""Information about the desired Power state for the power field."""
type PowerStateDesiredPower implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Whether a device’s power state is on or off."""
  value: Boolean!

  """Whether a device’s power state is on or off."""
  delta: Boolean
}

"""Information about the Power state for the power field"""
type PowerStatePowerField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: PowerStateReportedPower

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: PowerStateDesiredPower
}

"""Information about the reported Power state for the power field."""
type PowerStateReportedPower implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Whether a device’s power state is on or off."""
  value: Boolean!
}

type Query {
  health: Health!

  """
  The currently logged in user. This is the primary entry point into a user's data graph
  """
  me: User!
  integrations(
    """Limit the paged response to a max number of items."""
    first: Int = 10

    """
    Used to indicated where in the result set the paged response should start.
    """
    after: String
  ): IntegrationConnection!

  """The currently logged in user's tenant."""
  tenant: Tenant!

  """Query for a specific device."""
  device(
    """The id of a specific device."""
    id: ID!
  ): Device
}

"""The base trait reported state field interface."""
interface ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!
}

"""Represents a color encoded as a basic 24-bit true color value."""
type RGBColorValue {
  """The 8-bit value of the red channel for this color."""
  r: Int!

  """The 8-bit value of the green channel for this color."""
  g: Int!

  """The 8-bit value of the blue channel for this color."""
  b: Int!
}

"""Represents a color as a temperature-tuned value of white."""
type TemperatureColorValue {
  """The color temperature value in Kelvin."""
  temperature: Int!
}

type Tenant {
  id: ID!
  displayName: String!
}

"""The various modes a thermostat can be set to."""
enum ThermostatMode {
  """All activity is suspended."""
  OFF

  """
  Both heating and cooling mode can engage in order to support
  keeping the temperature within a specific range.
  
  """
  AUTO

  """The heater can engage."""
  HEAT

  """The A/C can engage."""
  COOL

  """Neither the heater nor A/C is engaged, but the fan is running."""
  FANONLY

  """The thermostat is in `dehumidify` mode."""
  DEHUMIDIFY

  """The thermostat is in `airflow` mode."""
  AIRFLOW
}

type ThermostatSettingDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The ThermostatSetting configuration for this device."""
  properties: ThermostatSettingProperties!

  """The ThermostatSetting state of this device."""
  state: ThermostatSettingState!
}

"""
The properties (trait configuration) payload for the ThermostatSetting trait
"""
type ThermostatSettingProperties {
  """Supported modes by the device."""
  availableThermostatModes: [ThermostatMode!]!

  """Supported fan modes by the device."""
  availableFanModes: [FanMode!]!
}

"""The state information for the ThermostatSetting trait"""
type ThermostatSettingState {
  """
  Current mode of the device, within the range of values as defined by availableThermostatModes.
  """
  mode: ThermostatSettingStateModeField!

  """Single temperature set point the device is currently programmed at."""
  targetTemperature: ThermostatSettingStateTargetTemperatureField!

  """Current observed temperature in temperatureUnit."""
  ambientTemperature: ThermostatSettingStateAmbientTemperatureField!

  """Higher end of the range for auto mode."""
  setpointHigh: ThermostatSettingStateSetpointHighField!

  """Lower end of the range for auto mode."""
  setpointLow: ThermostatSettingStateSetpointLowField!

  """Observed humidity."""
  ambientHumidity: ThermostatSettingStateAmbientHumidityField!

  """Single humidity set point the device is currently programmed at."""
  targetHumidity: ThermostatSettingStateTargetHumidityField!

  """
  Current Fan mode of the device, within the range of values as defined by availableFanModes.
  """
  fanMode: ThermostatSettingStateFanModeField!
}

"""
Information about the ThermostatSetting state for the ambientHumidity field
"""
type ThermostatSettingStateAmbientHumidityField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedAmbientHumidity

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredAmbientHumidity
}

"""
Information about the ThermostatSetting state for the ambientTemperature field
"""
type ThermostatSettingStateAmbientTemperatureField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedAmbientTemperature

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredAmbientTemperature
}

"""
Information about the desired ThermostatSetting state for the ambientHumidity field.
"""
type ThermostatSettingStateDesiredAmbientHumidity implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Observed humidity."""
  value: Float!

  """Observed humidity."""
  delta: Float
}

"""
Information about the desired ThermostatSetting state for the ambientTemperature field.
"""
type ThermostatSettingStateDesiredAmbientTemperature implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Current observed temperature in temperatureUnit."""
  value: Float!

  """Current observed temperature in temperatureUnit."""
  delta: Float
}

"""
Information about the desired ThermostatSetting state for the fanMode field.
"""
type ThermostatSettingStateDesiredFanMode implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """
  Current Fan mode of the device, within the range of values as defined by availableFanModes.
  """
  value: FanMode!

  """
  Current Fan mode of the device, within the range of values as defined by availableFanModes.
  """
  delta: FanMode
}

"""
Information about the desired ThermostatSetting state for the mode field.
"""
type ThermostatSettingStateDesiredMode implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """
  Current mode of the device, within the range of values as defined by availableThermostatModes.
  """
  value: ThermostatMode!

  """
  Current mode of the device, within the range of values as defined by availableThermostatModes.
  """
  delta: ThermostatMode
}

"""
Information about the desired ThermostatSetting state for the setpointHigh field.
"""
type ThermostatSettingStateDesiredSetpointHigh implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Higher end of the range for auto mode."""
  value: Float!

  """Higher end of the range for auto mode."""
  delta: Float
}

"""
Information about the desired ThermostatSetting state for the setpointLow field.
"""
type ThermostatSettingStateDesiredSetpointLow implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Lower end of the range for auto mode."""
  value: Float!

  """Lower end of the range for auto mode."""
  delta: Float
}

"""
Information about the desired ThermostatSetting state for the targetHumidity field.
"""
type ThermostatSettingStateDesiredTargetHumidity implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Single humidity set point the device is currently programmed at."""
  value: Float!

  """Single humidity set point the device is currently programmed at."""
  delta: Float
}

"""
Information about the desired ThermostatSetting state for the targetTemperature field.
"""
type ThermostatSettingStateDesiredTargetTemperature implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Single temperature set point the device is currently programmed at."""
  value: Float!

  """Single temperature set point the device is currently programmed at."""
  delta: Float
}

"""Information about the ThermostatSetting state for the fanMode field"""
type ThermostatSettingStateFanModeField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedFanMode

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredFanMode
}

"""Information about the ThermostatSetting state for the mode field"""
type ThermostatSettingStateModeField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedMode

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredMode
}

"""
Information about the reported ThermostatSetting state for the ambientHumidity field.
"""
type ThermostatSettingStateReportedAmbientHumidity implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Observed humidity."""
  value: Float!
}

"""
Information about the reported ThermostatSetting state for the ambientTemperature field.
"""
type ThermostatSettingStateReportedAmbientTemperature implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Current observed temperature in temperatureUnit."""
  value: Float!
}

"""
Information about the reported ThermostatSetting state for the fanMode field.
"""
type ThermostatSettingStateReportedFanMode implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """
  Current Fan mode of the device, within the range of values as defined by availableFanModes.
  """
  value: FanMode!
}

"""
Information about the reported ThermostatSetting state for the mode field.
"""
type ThermostatSettingStateReportedMode implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """
  Current mode of the device, within the range of values as defined by availableThermostatModes.
  """
  value: ThermostatMode!
}

"""
Information about the reported ThermostatSetting state for the setpointHigh field.
"""
type ThermostatSettingStateReportedSetpointHigh implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Higher end of the range for auto mode."""
  value: Float!
}

"""
Information about the reported ThermostatSetting state for the setpointLow field.
"""
type ThermostatSettingStateReportedSetpointLow implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Lower end of the range for auto mode."""
  value: Float!
}

"""
Information about the reported ThermostatSetting state for the targetHumidity field.
"""
type ThermostatSettingStateReportedTargetHumidity implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Single humidity set point the device is currently programmed at."""
  value: Float!
}

"""
Information about the reported ThermostatSetting state for the targetTemperature field.
"""
type ThermostatSettingStateReportedTargetTemperature implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Single temperature set point the device is currently programmed at."""
  value: Float!
}

"""
Information about the ThermostatSetting state for the setpointHigh field
"""
type ThermostatSettingStateSetpointHighField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedSetpointHigh

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredSetpointHigh
}

"""
Information about the ThermostatSetting state for the setpointLow field
"""
type ThermostatSettingStateSetpointLowField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedSetpointLow

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredSetpointLow
}

"""
Information about the ThermostatSetting state for the targetHumidity field
"""
type ThermostatSettingStateTargetHumidityField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedTargetHumidity

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredTargetHumidity
}

"""
Information about the ThermostatSetting state for the targetTemperature field
"""
type ThermostatSettingStateTargetTemperatureField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: ThermostatSettingStateReportedTargetTemperature

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: ThermostatSettingStateDesiredTargetTemperature
}

enum TraitName {
  """Functionality for devices that report their current battery level."""
  BATTERY_LEVEL

  """Functionality for devices that can have their brightness adjusted."""
  BRIGHTNESS

  """
  Functionality for devices with stateless button(s) for executing unidirectional commands.
  
  """
  BUTTON

  """
  Functionality for devices that can be set to a specific channel.
  
  """
  CHANNEL_SETTING

  """Functionality for devices that can have their fan speed adjusted."""
  FAN_SETTING

  """Functionality for devices that can be locked or unlocked."""
  LOCK_UNLOCK

  """Functionality for devices that can be opened or closed."""
  OPEN_CLOSE

  """Functionality for devices that can control media playback state."""
  PLAYBACK_SETTING

  """Functionality for devices that can be turned on or off."""
  POWER

  """
  Functionality for devices that are used to control and monitor temperature.
  """
  THERMOSTAT_SETTING

  """Functionality for devices that can have their volume adjusted."""
  VOLUME
}

type User {
  id: ID!
  displayName: String!
  firstActivityAt: DateTime!
  lastActivityAt: DateTime!

  """All devices this user can access."""
  devices(
    """Limit the paged response to a max number of items."""
    first: Int = 10

    """
    Used to indicated where in the result set the paged response should start.
    """
    after: String
    filter: DeviceFilterInput
  ): DeviceConnection!
}

"""A connection to a collection of User edges."""
type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
}

"""A single edge from a connection to User nodes."""
type UserEdge {
  cursor: String!
  node: User!
}

enum VIRTUAL_CONNECTOR_ActionStatus {
  RESOLVED
  REJECTED
}

type VolumeDeviceTrait implements DeviceTrait {
  """The name of this device trait."""
  name: TraitName!

  """
  Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  """
  instance: String!

  """The Volume configuration for this device."""
  properties: VolumeProperties!

  """The Volume state of this device."""
  state: VolumeState!
}

"""The properties (trait configuration) payload for the Volume trait"""
type VolumeProperties {
  """Indicates if the device supports toggling mute."""
  supportsToggleMute: Boolean!

  """Indicates if the device supports discrete mute."""
  supportsDiscreteMute: Boolean!
}

"""The state information for the Volume trait"""
type VolumeState {
  """Current volume level percentage."""
  volume: VolumeStateVolumeField!

  """Device is muted (true) or not muted (false)."""
  isMuted: VolumeStateIsMutedField!
}

"""Information about the desired Volume state for the isMuted field."""
type VolumeStateDesiredIsMuted implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Device is muted (true) or not muted (false)."""
  value: Boolean!

  """Device is muted (true) or not muted (false)."""
  delta: Boolean
}

"""Information about the desired Volume state for the volume field."""
type VolumeStateDesiredVolume implements DesiredStateField {
  """The datetime that this desired state value was most recently updated."""
  updatedAt: DateTime!

  """Current volume level percentage."""
  value: Int!

  """Current volume level percentage."""
  delta: Int
}

"""Information about the Volume state for the isMuted field"""
type VolumeStateIsMutedField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: VolumeStateReportedIsMuted

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: VolumeStateDesiredIsMuted
}

"""Information about the reported Volume state for the isMuted field."""
type VolumeStateReportedIsMuted implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Device is muted (true) or not muted (false)."""
  value: Boolean!
}

"""Information about the reported Volume state for the volume field."""
type VolumeStateReportedVolume implements ReportedStateField {
  """
  The DateTime that this reported state value was persisted to the platform.
  """
  createdAt: DateTime!

  """
  The DateTime that this reported state value was sampled (recorded) by the device
  """
  sampledAt: DateTime!

  """Current volume level percentage."""
  value: Int!
}

"""Information about the Volume state for the volume field"""
type VolumeStateVolumeField {
  """
  The most recently reported state. May be null if the device has not yet reported it's state
  """
  reported: VolumeStateReportedVolume

  """
  The device's desired state. May be null if the device has not yet reported it's state.
  """
  desired: VolumeStateDesiredVolume
}

