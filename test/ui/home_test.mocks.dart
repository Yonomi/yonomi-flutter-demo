// Mocks generated by Mockito 5.0.15 from annotations
// in yonomi_flutter_demo/test/ui/home_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter/material.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yonomi_flutter_demo/providers/devices_provider.dart' as _i3;
import 'package:yonomi_flutter_demo/providers/login_provider.dart' as _i6;
import 'package:yonomi_platform_sdk/yonomi-sdk.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeRequest_0 extends _i1.Fake implements _i2.Request {}

/// A class which mocks [DevicesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDevicesProvider extends _i1.Mock implements _i3.DevicesProvider {
  MockDevicesProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Request get request => (super.noSuchMethod(
        Invocation.getter(#request),
        returnValue: _FakeRequest_0(),
      ) as _i2.Request);
  @override
  List<_i3.DeviceModel> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i3.DeviceModel>[],
      ) as List<_i3.DeviceModel>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i4.Future<void> hydrateDevices(
          {_i3.GetDevicesFunction? injectGetDevicesMethod}) =>
      (super.noSuchMethod(
        Invocation.method(
          #hydrateDevices,
          [],
          {#injectGetDevicesMethod: injectGetDevicesMethod},
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> performAction(
    _i2.Trait? trait,
    String? deviceId, {
    _i3.GetDeviceDetailsFunction? injectGetDeviceDetailsMethod,
    _i3.SendLockUnlockFunction? injectSendLockUnlockMethod,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performAction,
          [
            trait,
            deviceId,
          ],
          {
            #injectGetDeviceDetailsMethod: injectGetDeviceDetailsMethod,
            #injectSendLockUnlockMethod: injectSendLockUnlockMethod,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toString() => super.toString();
}

/// A class which mocks [LoginProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginProvider extends _i1.Mock implements _i6.LoginProvider {
  MockLoginProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: '',
      ) as String);
  @override
  _i2.Request get request => (super.noSuchMethod(
        Invocation.getter(#request),
        returnValue: _FakeRequest_0(),
      ) as _i2.Request);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i7.NavigatorObserver {
  @override
  void didPush(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i7.Route<dynamic>? newRoute,
    _i7.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toString() => super.toString();
}
